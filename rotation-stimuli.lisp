;;; ============================================================================
;;; Because the patterns in each sub-space are random pixels between 50 and 100
;;; the x and y centre of rotation is define in this coordinate space (i.e., 75)
;;; and not in the coordinate space of the window display
;;; ============================================================================

(defun create-stimulus-patterns ()
  (let ((points-list nil))
    (loop repeat 4
          do (push (create-coordinate-points 5) points-list))
    points-list))

;;; =========================================================
;;; Takes two pixel values and computes the pixel in between
;;; them.  Remember - round produces two results but only
;;; assigns the first one to a variable.
;;; =========================================================

(defun mid-point (pval1 pval2)
  (let* ((sorted-vals (sort (list pval1 pval2) #'<))
         (mid-pt (/ (float (- (second sorted-vals)
                              (first sorted-vals))) 2.0)))
    (round (+ mid-pt (first sorted-vals)))))

;;; ==========================================================
;;; ==========================================================

(defun create-target-image (dims points-list)
  `((isa (polygon-feature square)
         screen-x ,(first (first dims)) screen-y ,(second (first dims))
         kind (polygon nil) value (polygon "sub1")
         points ,(list (first points-list))
         height ,(third (first dims)) width ,(fourth (first dims))
         centre-x ,(mid-point (first (first dims)) (+ (first (first dims))
                                                      (fourth (first dims))))
         centre-y ,(mid-point (second (first dims)) (+ (second (first dims))
                                                       (third (first dims))))
         color black regular true)
    (isa (polygon-feature square)
         screen-x ,(first (second dims)) screen-y ,(second (second dims))
         kind (polygon nil) value (polygon "sub2")
         points ,(list (second points-list))
         height ,(third (second dims)) width ,(fourth (second dims))
         centre-x ,(mid-point (first (second dims)) (+ (first (second dims))
                                                       (fourth (second dims))))
         centre-y ,(mid-point (second (second dims)) (+ (second (second dims))
                                                        (third (second dims))))
         color white regular true)
    (isa (polygon-feature square)
         screen-x ,(first (third dims)) screen-y ,(second (third dims))
         kind (polygon nil) value (polygon "sub3")
         points ,(list (third points-list))
         height ,(third (third dims)) width ,(fourth (third dims))
         centre-x ,(mid-point (first (third dims)) (+ (first (third dims))
                                                      (fourth (third dims))))
         centre-y ,(mid-point (second (third dims)) (+ (second (third dims))
                                                       (third (third dims))))
         color red regular true)
    (isa (polygon-feature square)
         screen-x ,(first (fourth dims)) screen-y ,(second (fourth dims))
         kind (polygon nil) value (polygon "sub4")
         points ,(list (fourth points-list))
         height ,(third (fourth dims)) width ,(fourth (fourth dims))
         centre-x ,(mid-point (first (fourth dims)) (+ (first (fourth dims))
                                                       (fourth (fourth dims))))
         centre-y ,(mid-point (second (fourth dims)) (+ (second (fourth dims))
                                                        (third (fourth dims))))
         color green regular true)
    (isa (polygon-feature compound-square)
         screen-x ,(first (fifth dims)) screen-y ,(second (fifth dims))
         kind (polygon nil) value (polygon "compound")
         ; Pass a list of two lists, one for the location and one for the object
         points ,(list (concatenate 'list
                               (first points-list) (second points-list)
                               (third points-list) (fourth points-list)))
         height ,(third (fifth dims)) width ,(fourth (fifth dims))
         centre-x ,(mid-point (first (fifth dims)) (+ (first (fifth dims))
                                                      (fourth (fifth dims))))
         centre-y ,(mid-point (second (fifth dims)) (+ (second (fifth dims))
                                                       (third (fifth dims))))
         color compound regular true
         sub1 (nil "sub1")
         sub2 (nil "sub2")
         sub3 (nil "sub3")
         sub4 (nil "sub4"))))

;;; ==========================================================
;;; ==========================================================

(defun get-object-points (object-number image)
  "Return the coordinate points of the sub-features or compound object."
  (case (read-from-string object-number)
    (sub1 (first (nth 11 (first image))))
    (sub2 (first (nth 11 (second image))))
    (sub3 (first (nth 11 (third image))))
    (sub4 (first (nth 11 (fourth image))))
    (compound (first (nth 11 (fifth image))))))

;; ===========================================================
;; ===========================================================

(defun create-rotated-image (input-image direction initial-rotation)
  (let ((r1 nil) (r2 nil) (r3 nil) (r4 nil) (rc nil))
    (cond ((eql direction 'clockwise)
           (setf r1 (rotate-clockwise-around-point (get-object-points "sub1" input-image) initial-rotation))
           (setf r2 (rotate-clockwise-around-point (get-object-points "sub2" input-image) initial-rotation))
           (setf r3 (rotate-clockwise-around-point (get-object-points "sub3" input-image) initial-rotation))
           (setf r4 (rotate-clockwise-around-point (get-object-points "sub4" input-image) initial-rotation))
           (setf rc (concatenate 'list r1 r2 r3 r4)))
          ((eql direction 'counter-clockwise)
           (setf r1 (rotate-counter-clockwise-around-point (get-object-points "sub1" input-image) initial-rotation))
           (setf r2 (rotate-counter-clockwise-around-point (get-object-points "sub2" input-image) initial-rotation))
           (setf r3 (rotate-counter-clockwise-around-point (get-object-points "sub3" input-image) initial-rotation))
           (setf r4 (rotate-counter-clockwise-around-point (get-object-points "sub4" input-image) initial-rotation))
           (setf rc (concatenate 'list r1 r2 r3 r4)))
          (t 'error))
    (list
     `(isa (polygon-feature square)
           screen-x ,(first (first *rotated-image-dimensions*))
           screen-y ,(second (first *rotated-image-dimensions*))
           kind (polygon nil) value (polygon "sub1") points ,(list r1)
           height ,(third (first *rotated-image-dimensions*))
           width ,(fourth (first *rotated-image-dimensions*))
           centre-x ,(first *pattern-rotation-centre*)
           centre-y ,(second *pattern-rotation-centre*)
           color black regular true)
     `(isa (polygon-feature square)
           screen-x ,(first (second *rotated-image-dimensions*))
           screen-y ,(first (second *rotated-image-dimensions*))
           kind (polygon nil) value (polygon "sub2") points ,(list r2)
           height ,(third (second *rotated-image-dimensions*))
           width ,(fourth (second *rotated-image-dimensions*))
           centre-x ,(first *pattern-rotation-centre*)
           centre-y ,(second *pattern-rotation-centre*)
           color white regular true)
     `(isa (polygon-feature square)
           screen-x ,(first (third *rotated-image-dimensions*))
           screen-y ,(first (third *rotated-image-dimensions*))
           kind (polygon nil) value (polygon "sub3") points ,(list r3)
           height ,(third (third *rotated-image-dimensions*))
           width ,(fourth (third *rotated-image-dimensions*))
           centre-x ,(first *pattern-rotation-centre*)
           centre-y ,(second *pattern-rotation-centre*)
           color red regular true)
     `(isa (polygon-feature square)
           screen-x ,(first (fourth *rotated-image-dimensions*))
           screen-y ,(first (fourth *rotated-image-dimensions*))
           kind (polygon nil) value (polygon "sub4") points ,(list r4)
           height ,(third (fourth *rotated-image-dimensions*))
           width ,(fourth (fourth *rotated-image-dimensions*))
           centre-x ,(first *pattern-rotation-centre*)
           centre-y ,(second *pattern-rotation-centre*)
           color green regular true)
     `(isa (polygon-feature compound-square)
           screen-x ,(first (fifth *rotated-image-dimensions*))
           screen-y ,(first (fifth *rotated-image-dimensions*))
           kind (polygon nil) value (polygon "compound") points ,(list rc)
           height ,(third (fifth *rotated-image-dimensions*))
           width ,(fourth (fifth *rotated-image-dimensions*))
           centre-x ,(first *pattern-rotation-centre*)
           centre-y ,(second *pattern-rotation-centre*)
           color compound regular true
           sub1 (nil "sub1")
           sub2 (nil "sub2")
           sub3 (nil "sub3")
           sub4 (nil "sub4")))))
